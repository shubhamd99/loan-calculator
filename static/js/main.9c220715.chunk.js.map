{"version":3,"sources":["containers/Tax/Taxcalculator.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Taxcalculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","axios","get","concat","state","loan","duration","then","res","console","log","data","setState","interest","interestRate","monthlyPay","monthlyPayment","amount","principal","catch","error","isLoan","onInputChange","bind","assertThisInitialized","onRangeChange","event","target","value","react_default","a","createElement","Form","Group","controlId","Label","style","fontWeight","className","onChange","id","type","min","max","step","Component","Layout","containers_Tax_Taxcalculator","App","Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c220715.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport './Taxcalculator.css';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Taxcalculator extends Component {\r\n\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n         duration: '6',\r\n         loan: 500,\r\n         isLoan: false,\r\n         interest:'',\r\n         monthlyPay: '',\r\n         principal: ''\r\n      }\r\n      this.onInputChange = this.onInputChange.bind(this);\r\n      this.onRangeChange = this.onRangeChange.bind(this);\r\n    }\r\n\r\n\r\n    async onInputChange(event) {\r\n        await this.setState({\r\n            duration: event.target.value\r\n        });\r\n        this.onSubmit()\r\n            \r\n\t}\r\n\r\n\tasync onRangeChange(event) {\r\n        await this.setState({\r\n            loan: event.target.value,\r\n        });\r\n        this.onSubmit()\r\n    }\r\n    \r\n    onSubmit = () => {\r\n         axios.get(`https://ftl-frontend-test.herokuapp.com/interest?amount=${this.state.loan}&numMonths=${this.state.duration}`)\r\n                .then(res => {\r\n                    console.log(res.data)\r\n                    this.setState({ \r\n                        interest: res.data.interestRate,\r\n                        monthlyPay: res.data.monthlyPayment.amount,\r\n                        principal: res.data.principal.amount\r\n                    });\r\n                })\r\n                .catch(error => console.log(error));\r\n    }\r\n  \r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <h1>Interest Finder</h1>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label style={{ fontWeight: '500' }}>Enter the Loan duration : </Form.Label>\r\n\r\n                        <select className=\"form-control input\" value={this.state.duration} onChange={this.onInputChange}>\r\n                        <option value='6'>6 months</option>\r\n                        <option value='7'>7 months</option>\r\n                        <option value='8'>8 months</option>\r\n                        <option value='9'>9 months</option>\r\n                        <option value='10'>10 months</option>\r\n                        <option value='11'>11 months</option>\r\n                        <option value='12'>12 months</option>\r\n                        </select>\r\n                        \r\n                        <div className=\"range-container\">\r\n                        <div className=\"range-slider\">\r\n                            <span id=\"rs-bullet\" className=\"rs-label\">{this.state.loan}</span>\r\n                            <input id=\"rs-range-line\" className=\"rs-range\" type=\"range\" value={this.state.loan} onChange={this.onRangeChange} min=\"500\" max=\"5000\" step=\"50\" />\r\n                            \r\n                        </div>\r\n                        <div className=\"box-minmax\">\r\n                            <span>$500</span><span>$5000</span>\r\n                        </div>\r\n                        </div>\r\n\r\n                    </Form.Group>\r\n               </Form>\r\n               <div className=\"output\">\r\n                <h5>Interest - {this.state.interest}%</h5>\r\n                <h6>Monthly Payment - ${this.state.monthlyPay}</h6>\r\n                <h6>Principal amount - ${this.state.principal}</h6>\r\n               </div>\r\n               <div className=\"copyright\">\r\n               <h4>By Shubham Dhage</h4>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Taxcalculator;","import React from 'react'\r\n\r\nimport './Layout.css';\r\nimport Taxcalculator from '../../containers/Tax/Taxcalculator';\r\n\r\nexport default function Layout() {\r\n  return (\r\n      <div className=\"Layout\">\r\n            <div className=\"container\">\r\n            <div className=\"row mx-auto\">\r\n                <div className=\"col \">\r\n\r\n                    <div className=\"marvel-device iphone-x\">\r\n                    <div className=\"notch\">\r\n                        <div className=\"camera\"></div>\r\n                        <div className=\"speaker\"></div>\r\n                    </div>\r\n                    <div className=\"top-bar\"></div>\r\n                    <div className=\"sleep\"></div>\r\n                    <div className=\"bottom-bar\"></div>\r\n                    <div className=\"volume\"></div>\r\n                    <div className=\"overflow\">\r\n                        <div className=\"shadow shadow--tr\"></div>\r\n                        <div className=\"shadow shadow--tl\"></div>\r\n                        <div className=\"shadow shadow--br\"></div>\r\n                        <div className=\"shadow shadow--bl\"></div>\r\n                    </div>\r\n                    <div className=\"inner-shadow\"></div>\r\n                    <div className=\"screen\">\r\n                     \r\n                     <div className=\"form-calc\"><Taxcalculator /></div>\r\n                      \r\n                    </div>\r\n                </div>\r\n\r\n                </div>\r\n            </div>\r\n            </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Layout from './components/Layout/Layout'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n         <Layout />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}